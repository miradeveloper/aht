
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:qrscan/qrscan.dart'as scanner;
import 'package:flushbar/flushbar.dart';



class Attendance extends StatefulWidget {
  @override
  _AttendanceState createState() => _AttendanceState();
}

class _AttendanceState extends State<Attendance> {
  // String FinalDate='';
  // String FinalTime='';
  // String _checkInTime='';
  String result = '';
  String _messageText;
  bool pressAttention = false;
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        automaticallyImplyLeading: false,
        centerTitle: true,
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: <Widget>[
            Text('Attendance'.toUpperCase(), style: TextStyle(fontSize: 25,)
            ),
            Icon(Icons.accessibility_new_sharp,size: 26,),
          ],
        ),
      ),

      body:Column(crossAxisAlignment: CrossAxisAlignment.start ,
        children: <Widget>[
          Text(
            'The future belongs to those who prepare for it today. So Being on Time is very much important ',
            textAlign: TextAlign.center,
            style: TextStyle(
                color: Colors.blue,
                fontWeight: FontWeight.w500,
                fontSize: 18),
          ),
          Padding(
            padding: const EdgeInsets.all(20.0),
            child: Text('Dear Colleagues, \nOffice timing -9.30 to 6.30, With prior request Permission allowed to take 4 Hours in a month',
              textAlign: TextAlign.left,
              style: TextStyle(
                  color: Colors.deepOrange,
                  fontWeight: FontWeight.w500,
                  fontSize: 20),
            ),
          ),


          Text('Please Note the Rules',
            textAlign: TextAlign.left,
            style: TextStyle(
                decoration: TextDecoration.underline,
                decorationThickness: 1.8,
                decorationColor: Colors.red,
                color: Colors.blueAccent,
                fontWeight: FontWeight.w500,
                fontSize: 25),
          ),


          Container(
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Text('1.Once entered in office immediately TAP "IN TIME" to scan with QR Bar to avoid Late Entry'
                  '\n 2.''Coming after 9.30 will be automatically taken as permission and late minutes or hours '
                  'will be reduced in 4hours permission'
                  '\n 3.After 4 hours finished further late or permission automatically will be taken as half day or full day leave, '
                  ' \n 4.During Leaving the office Tap "OUT TIME"\n 5.For a Direct Visit please Tap on Request and Submit the reason',
                  textAlign: TextAlign.center,style: TextStyle(fontSize: 18)),
            ),
          ),
          Container(
            padding: const EdgeInsets.all(50.0),
            child: Row(mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                // Center(
                //   child: Text(""), // Here the scanned result will be shown
                // ),
                RaisedButton(child:Text('IN TIME'),onPressed: (){_in();}),
                RaisedButton(child:Text('OUT TIME'),onPressed: (){_out();}),
                RaisedButton(child:Text('REQUEST'),onPressed: (){_request();}),
              ],
            ),
          ),
          Container(
            child: Row(mainAxisAlignment: MainAxisAlignment.center,
              children:[RaisedButton(onPressed: () {_status();},
                textColor: Colors.blue,
                child: Text('Status'.toUpperCase()),),],


            ),),
        ],

      ),
    );
  }


  // final or const permission Time per month =4Hours
// office start time = 9:30
//  office close time = 6:30
//  display in screen  qr code scan before 9:30 good you came early
//  display in screen qr code scan after 9:30 you're late and show the difference time. late hours or minutes should reduce from permission hours and the remaining permission hours to be displayed
//  similarly if leaving before 6:30 should get permission for office purpose or early time will reduce from permission time.
//  leaving early before 6:30 and coming after 9:30 for personal things should get request and the same will reduced in permission time.
//  After permission Time completes late or leaving early will be considered as half day leave
//  suppose direct visit should get approval from request and it should marked as present. similary early away from close time should get permission.
  //______________________________________________________________________**********************************************************************
 //  permissionTime=4 Hours per Month,
 // start Office Time=9:30,
 // close office  TIme =18,
 // Due to personal before or after office time scanning QR will be reduced from permission Time.
 // Completion of permission time will be taken as half day and more than 4 times half day will be considered as leave
 // Due to Office work before or after office time should get request so that permission time will not reduce.

  startDay(Duration permissionTime,officeTime,startTime){
  Duration remainingPermissionTime;
  if(startTime.isAfter(officeTime)){
    remainingPermissionTime=startTime.difference(officeTime);
    permissionTime -=remainingPermissionTime;
  }
  return permissionTime;
}

Future _in()async{
  try {
    int permissionHours,permissionMin;
    String cameraScanResult = await scanner.scan();
    DateTime startTime=DateTime.now();
    DateTime officeTime=DateTime(startTime.year,startTime.month,startTime.day,9,30);
    permissionHours=4;
    permissionMin=0;
    Duration permissionTime= new Duration(hours: permissionHours,minutes: permissionMin);
    permissionTime=startDay(permissionTime, officeTime, startTime);
    Duration differenceTime= startTime.difference(officeTime);
    int  differenceHours,differenceMin;
    differenceHours=differenceTime.inHours;
    differenceMin=differenceTime.inMinutes.remainder(60);
    String earlyOrSame;

    if(
    startTime.isBefore(officeTime)){
      earlyOrSame="early & Thats Good";
    }
    else{
      startTime.isAtSameMomentAs(officeTime);
      earlyOrSame="late";
      differenceHours=differenceHours.abs();
      differenceMin=differenceMin.abs();}
    permissionHours=permissionTime.inHours;
    permissionMin=permissionTime.inMinutes.remainder(60);
    String _diffString = "You\'re  ${differenceHours.toString()} hours and ${differenceMin.toString()} minutes $earlyOrSame."
        "Your remaining Permission Time is ${permissionHours.toString()} hours and ${permissionMin.toString()} minutes";

    String _minute=startTime.minute.toString(); //these 4 lines ensure that the minutes value has 2 characters
    if (_minute.length<2) {
      _minute='0'+_minute;
    }
    // String _diffString = "You\'re  ${differenceHours.toString()} hours and ${differenceMin.toString()} minutes";
    setState(() {
      this.result = cameraScanResult; // setting string result with cameraScanResult
      _messageText = '${startTime.hour}:$_minute on ${startTime.day}/${startTime.month}/${startTime.year}'; //this line gives you a string to output to the user
      _messageText += "\n $_diffString";
    });

  } on PlatformException catch (e) {
    print(e.message);
  }
  Flushbar(
    title: 'Your IN Time',
    messageText: Text(
      _messageText ,
      style: TextStyle(
          fontSize: 16.0,
          color: Colors.green
      ),
    ),
    duration: Duration(seconds: 3),
  )..show(context);
}
  // closeDay(Duration permissionTime,officeTime,closeTime){
  //   Duration remainingPermissionTime;
  //   if(closeTime.isAfter(officeTime)){
  //     remainingPermissionTime=closeTime.difference(officeTime);
  //     permissionTime -=remainingPermissionTime;
  //   }
  //   return permissionTime;
  // }
  Future _out()async{
    try {
      int earlyHours,earlyMin;
      String _diffString;
      String cameraScanResult = await scanner.scan();
      DateTime closeTime=DateTime.now();
      DateTime officeTime=DateTime(closeTime.year,closeTime.month,closeTime.day,18,30);

      if(closeTime.isBefore(officeTime)){
        Duration earlyTime=officeTime.difference(closeTime);
        earlyHours=earlyTime.inHours;
        earlyMin= earlyTime.inMinutes.remainder(60);
        _diffString = "You\'re leaving ${earlyHours.toString()} hours and ${earlyMin.toString()} early";
      }

      String _minute=closeTime.minute.toString(); //these 4 lines ensure that the minutes value has 2 characters
      if (_minute.length<2) {
        _minute='0'+_minute;
      }
      setState(() {
        this.result = cameraScanResult; // setting string result with cameraScanResult
        _messageText = '${closeTime.hour}:$_minute on ${closeTime.day}/${closeTime.month}/${closeTime.year}'; //this line gives you a string to output to the user
        _messageText += "\n $_diffString";
      });
    } on PlatformException catch (e) {
      print(e.message);
    }
    Flushbar(
      title: 'Your OUT Time',
      messageText:  Text(_messageText, style: TextStyle(fontSize: 16.0, color: Colors.green),),
      duration: Duration(seconds: 3),
    )..show(context);

  }

  _request(){setState(() => pressAttention = !pressAttention);

  }
  _status(){
  }

}
